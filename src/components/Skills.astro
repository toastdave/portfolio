---
const skills = [
  {
    category: 'Frontend',
    items: [
      { name: 'TypeScript', level: 90 },
      { name: 'React', level: 85 },
      { name: 'Tailwind CSS', level: 90 },
      { name: 'Next.js', level: 85 },
      { name: 'HTML/CSS', level: 95 },
    ]
  },
  {
    category: 'Backend',
    items: [
      { name: 'Node.js', level: 85 },
      { name: 'C# .Net', level: 85 },
      { name: 'Python', level: 80 },
      { name: 'SQL', level: 75 },
      { name: 'REST API', level: 90 },
    ]
  },
  {
    category: 'DevOps & Tools',
    items: [
      { name: 'Git', level: 90 },
      { name: 'Docker', level: 75 },
      { name: 'Azure', level: 80 },
      { name: 'YAML', level: 80 },
      { name: 'Figma', level: 85 },
      { name: 'Playwright', level: 80 }
    ]
  }
];
---

<section id="skills" class="skills">
  <div class="container">
    <div class="section-header">
      <h2 class="section-title">My Skills</h2>
      <p class="section-subtitle">Technologies and tools I work with</p>
    </div>
    
    <div class="skills-container">
      {skills.map(skillGroup => (
        <div class="skill-group">
          <h3 class="skill-category">{skillGroup.category}</h3>
          <div class="skill-items">
            {skillGroup.items.map(skill => (
              <div class="skill-item">
                <div class="skill-info">
                  <span class="skill-name">{skill.name}</span>
                  <span class="skill-level">{skill.level}%</span>
                </div>
                <div class="skill-bar">
                  <div class="skill-progress" style={`width: ${skill.level}%`}></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<style>
  .skills {
    padding: var(--space-7) 0;
  }
  
  .section-header {
    text-align: center;
    margin-bottom: var(--space-5);
  }
  
  .section-title {
    font-size: 2.5rem;
    margin-bottom: var(--space-2);
    position: relative;
    display: inline-block;
  }
  
  .section-title::after {
    content: '';
    position: absolute;
    bottom: -10px;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 3px;
    background: linear-gradient(90deg, var(--color-primary-600), var(--color-accent-500));
    border-radius: var(--radius-full);
  }
  
  .section-subtitle {
    color: var(--color-text-secondary);
    font-size: 1.1rem;
    max-width: 600px;
    margin: 0 auto;
  }
  
  .skills-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--space-5);
  }
  
  .skill-category {
    font-size: 1.25rem;
    margin-bottom: var(--space-3);
    padding-bottom: var(--space-2);
    border-bottom: 1px solid var(--color-border);
  }
  
  .skill-items {
    display: flex;
    flex-direction: column;
    gap: var(--space-3);
  }
  
  .skill-item {
    width: 100%;
  }
  
  .skill-info {
    display: flex;
    justify-content: space-between;
    margin-bottom: var(--space-1);
  }
  
  .skill-name {
    font-weight: 500;
  }
  
  .skill-level {
    color: var(--color-text-secondary);
    font-size: 0.9rem;
  }
  
  .skill-bar {
    height: 8px;
    background-color: var(--color-bg-secondary);
    border-radius: var(--radius-full);
    overflow: hidden;
  }
  
  .skill-progress {
    height: 100%;
    background: linear-gradient(90deg, var(--color-primary-600), var(--color-accent-500));
    border-radius: var(--radius-full);
    width: 0;
    transition: width 1.5s ease-in-out;
  }
  
  @media (max-width: 768px) {
    .skills-container {
      grid-template-columns: 1fr;
    }
    
    .section-title {
      font-size: 2rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Animate skill bars when they come into view
    const skillBars = document.querySelectorAll('.skill-progress');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.style.width = entry.target.parentElement.dataset.width;
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.1 });
    
    skillBars.forEach(bar => {
      // Store the original width
      bar.parentElement.dataset.width = bar.style.width;
      // Reset width to 0 initially
      bar.style.width = '0';
      // Observe the element
      observer.observe(bar);
    });
  });
</script>